name: Deployment Pipeline
on:
  push:
    branches:
      - staging

jobs:
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ vars.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and Push Backend Image
        run: |
          docker build -t ${{ vars.DOCKERHUB_USERNAME }}/nnine-helicar-be:latest -f ./server/Dockerfile ./server
          docker push ${{ vars.DOCKERHUB_USERNAME }}/nnine-helicar-be:latest

  deploy-azure:
    name: Deploy to Azure VM
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Azure VM IP
        run: echo "AZURE_VM_IP=${{ secrets.AZURE_VM_IP }}" >> $GITHUB_ENV

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create .env file in backend folder on Azure VM
        run: |
          ssh -o StrictHostKeyChecking=no azureuser@${{ env.AZURE_VM_IP }} << 'EOF'
            echo "DB_NAME=${{secrets.DB_NAME}}" >> /home/azureuser/client-project/helicarbooking/server/.env
            echo "DB_USERNAME=${{secrets.DB_USERNAME}}" >> /home/azureuser/client-project/helicarbooking/server/.env
            echo "DB_PASSWORD=${{secrets.DB_PASSWORD}}" >> /home/azureuser/client-project/helicarbooking/server/.env
            echo "DB_HOST=postgres" > /home/azureuser/client-project/helicarbooking/server/.env
            echo "DB_PORT=${{secrets.DB_PORT}}" >> /home/azureuser/client-project/helicarbooking/server/.env
            echo "SSL=${{secrets.SSL}}" >> /home/azureuser/client-project/helicarbooking/server/.env
            echo "DB_DIALECT=${{secrets.DB_DIALECT}}" >> /home/azureuser/client-project/helicarbooking/server/.env
            echo "SECRET_KEY=${{secrets.SECRET_KEY}}" >> /home/azureuser/client-project/helicarbooking/server/.env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> /home/azureuser/client-project/helicarbooking/server/.env
            echo "ADMIN_MAIL=${{ secrets.ADMIN_MAIL }}" >> /home/azureuser/client-project/helicarbooking/server/.env
            echo "CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}" >> /home/azureuser/client-project/helicarbooking/server/.env
            echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> /home/azureuser/client-project/helicarbooking/server/.env
            echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> /home/azureuser/client-project/helicarbooking/server/.env
            echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> /home/azureuser/client-project/helicarbooking/server/.env
            echo "SMTP_EMAIL=${{ secrets.SMTP_EMAIL }}" >> /home/azureuser/client-project/helicarbooking/server/.env
            echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD}}" >> /home/azureuser/client-project/helicarbooking/server/.env
          EOF

      - name: Deploy to Azure VM with Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no azureuser@${{ env.AZURE_VM_IP }} << 'EOF'
            cd /home/azureuser/client-project/helicarbooking           
            echo "Pulling latest code from origin staging..."
            git pull origin staging

            echo "Cleaning up disk space..."
            docker image prune -f
            docker container prune -f
            docker volume prune -f

            echo "Pulling latest Docker image..."
            sudo docker pull ${{ vars.DOCKERHUB_USERNAME }}/nnine-helicar-be:latest

            echo "Rebuilding and restarting containers..."
            docker compose down
            docker compose up -d --build

            echo "Deployment successful. Running containers:"
            docker ps
          EOF
